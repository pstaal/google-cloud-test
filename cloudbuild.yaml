# cloudbuild.yaml - Automatisch builden en deployen naar Google Cloud Run
steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: Build-Backend
    dir: 'backend'
    args:
      [
        'build',
        '-t',
        'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA',
        '.'
      ]

  # Stap 1: Push de Docker-image naar Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push-Backend
    args:
      [
        'push',
        'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA'
      ]

  # Stap 2: Deploy de Docker-image naar Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy-Backend
    entrypoint: gcloud
    args:
      [
        'run',
        'deploy',
        'backend-service', # Naam van je Cloud Run-service
        '--image', 'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA', # Gebruik de image die we pushen
        '--platform', 'managed', # Gebruik het beheerde Cloud Run-platform
        '--region', 'europe-west1', # Pas aan naar jouw regio (bijv. europe-west1)
        '--allow-unauthenticated' # Zorg ervoor dat de service openbaar is
      ]

  # Build the frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build-Frontend
    dir: 'frontend' # Directory containing the Dockerfile
    args:
      [
        'build',
        '-t',
        'gcr.io/$PROJECT_ID/frontend-image:$SHORT_SHA',
        '.'
      ]


  # Push de Docker-image naar Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push-Frontend
    args:
      [
        'push',
        'gcr.io/$PROJECT_ID/frontend-image:$SHORT_SHA'
      ]

  - name: 'gcr.io/cloud-builders/docker'
    id: Run-Frontend
    args:
      - 'run'
      - '--rm'
      - 'gcr.io/$PROJECT_ID/frontend-image:$SHORT_SHA'


options:
  logging: CLOUD_LOGGING_ONLY

# Artefacten (bijvoorbeeld logs of debug-informatie)
artifacts:
  images:
    - 'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA'