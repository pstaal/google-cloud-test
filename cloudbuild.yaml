# cloudbuild.yaml - Automatisch builden en deployen naar Google Cloud Run
steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    dir: 'backend'
    args:
      [
        'build',
        '-t',
        'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA',
        '.'
      ]

  # Stap 1: Push de Docker-image naar Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    args:
      [
        'push',
        'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA'
      ]

  # Stap 2: Deploy de Docker-image naar Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy
    entrypoint: gcloud
    args:
      [
        'run',
        'deploy',
        'backend-service', # Naam van je Cloud Run-service
        '--image', 'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA', # Gebruik de image die we pushen
        '--platform', 'managed', # Gebruik het beheerde Cloud Run-platform
        '--region', 'europe-west1', # Pas aan naar jouw regio (bijv. europe-west1)
        '--allow-unauthenticated' # Zorg ervoor dat de service openbaar is
      ]


  # Step 1: Install dependencies
  - name: node
    dir: frontend
    entrypoint: yarn
    args: ["install"]

  # Step 2: Run Vite build process
  - name: node
    dir: frontend
    entrypoint: yarn
    args: ["serve"]

  # Step 3: Upload built Vite `dist` folder to Google Cloud Storage bucket
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    dir: frontend
    args: ["gsutil", "-m", "cp", "-r", "dist/*", "gs://frontend-ctrllearning-bucket"]

options:
  logging: CLOUD_LOGGING_ONLY

# Artefacten (bijvoorbeeld logs of debug-informatie)
artifacts:
  images:
    - 'gcr.io/$PROJECT_ID/backend-image:$SHORT_SHA'